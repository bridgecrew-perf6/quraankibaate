[{"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/index.js":"1","/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/App.js":"2","/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/AllMessages.js":"3","/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/EMessage.js":"4","/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/EAllMessages.js":"5","/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/Message.js":"6"},{"size":219,"mtime":1620758209027,"results":"7","hashOfConfig":"8"},{"size":772,"mtime":1620758503847,"results":"9","hashOfConfig":"8"},{"size":1132,"mtime":1620758728694,"results":"10","hashOfConfig":"8"},{"size":2259,"mtime":1620758945725,"results":"11","hashOfConfig":"8"},{"size":1141,"mtime":1620758743527,"results":"12","hashOfConfig":"8"},{"size":2327,"mtime":1620759001020,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1abfl9n",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/index.js",[],"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/App.js",[],"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/AllMessages.js",[],"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/EMessage.js",["27"],"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/EAllMessages.js",[],"/Users/khantanveer/Desktop/Dev/GitCloned/quraankibaate/src/components/Message.js",["28"],"import React, { useState } from \"react\";\nimport Data from \"../data/data.json\";\nimport \"./Message.css\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport { Link } from \"react-router-dom\";\nimport GTranslateIcon from \"@material-ui/icons/GTranslate\";\nimport { Button } from \"@material-ui/core\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Message = () => {\n  // snackbar\n  const notify = () => {\n    navigator.clipboard.writeText(`${message.message}\\n${message.source}`).then(\n      function () {\n        toast.success(\"Successfully Copied\", {\n          position: toast.POSITION.TOP_CENTER,\n        });\n      },\n      function () {\n        /* clipboard write failed */\n        toast.error(\"Something went wrong!\", {\n          position: toast.POSITION.TOP_CENTER,\n        });\n      }\n    );\n  };\n  // end snackbar\n  const messages = Data.main;\n  const message = messages[Math.floor(Math.random() * messages.length)];\n\n  const [value, setValue] = useState();\n\n  const refresh = () => {\n    setValue({});\n  };\n\n  return (\n    <>\n      <div className=\"message\">\n        <div className=\"messages__translate\">\n          <Link to=\"/english\">\n            <Button>\n              <GTranslateIcon />\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"message__text\">\n          <h1>{message.message}</h1>\n        </div>\n        <div className=\"message__copyBtn\">\n          <Button onClick={notify}>Copy to clipboard</Button>\n          <ToastContainer autoClose={3000} />\n        </div>\n        <div className=\"message__source\">\n          <h3>{message.source}</h3>\n        </div>\n\n        <div className=\"message__button\">\n          <Fab variant=\"extended\" color=\"primary\" onClick={refresh}>\n            <AutorenewIcon className=\"message__buttonIcon\" />\n            Get New One\n          </Fab>\n        </div>\n        <div className=\"message__all\">\n          <Link to=\"/all\">\n            <Fab variant=\"extended\" color=\"primary\">\n              <ArrowForwardIosIcon className=\"message__buttonIcon\" />\n              All\n            </Fab>\n          </Link>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Message;\n",{"ruleId":"29","severity":1,"message":"30","line":16,"column":10,"nodeType":"31","messageId":"32","endLine":16,"endColumn":15},{"ruleId":"29","severity":1,"message":"30","line":34,"column":10,"nodeType":"31","messageId":"32","endLine":34,"endColumn":15},"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar"]